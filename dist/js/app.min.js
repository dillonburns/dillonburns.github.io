var windowHeight = window.innerHeight
  , windowWidth = window.innerWidth;
var centerX = windowWidth / 2
  , centerY = windowHeight / 2;
var dx, dy, dmouse, mmX, mmY;

function setup() {
  var canvas = createCanvas(windowWidth, windowHeight);
  canvas.parent('p5-holder');
}

function draw() {
  resetMatrix();
  updateMouseVars();
  thing1();
  thing2();
  thing3();
}

function mouseClicked() {
  //clear();
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

function updateMouseVars() {
  dx = mouseX - pmouseX;
  dy = mouseY - pmouseY;
  mmX = mouseX - width / 2;
  mmY = mouseY - height / 2;
  dmouse = int(dist(mouseX, mouseY, pmouseX, pmouseY));
  if (mouseIsPressed) {
    fill(0);
  }
  else {
    fill(255);
  }
}

function thing1() {
  if (dmouse != 0) {
    ellipse(mouseX, mouseY, dmouse, dmouse);
  }
}
/*
 *  Draws a circle out of circles.
 */
function thing2() {
  var rad, bradius = dmouse, sradius = 25;
  push();
  translate(windowWidth / 2, windowHeight / 2);
  for (var i = 0; i < 360; i++) {
    rad = radians(i);
    ellipse(sin(rad) * bradius + mmX, cos(rad) * bradius + mmY, sradius + dmouse);
  }
  pop();
}
/*
 *  Draws a certain number of circles , in a circle pattern.
 */
function thing3() {
  var angleStep, numCircles = 6, theta, Px, Py, r = 25;
  angleStep = 360.0 / numCircles;
  push();
  for (var i = 0; i < numCircles; i++) {
    theta = i * angleStep + mouseX;
    Px = centerX + (dmouse * cos(radians(theta)));
    Py = centerY + (dmouse * sin(radians(theta)));
    ellipse(Px, Py, sqrt(dmouse));
  }
  pop();
}
function Jitter() {

   this.diameter = random(10, 30);

   this.position = createVector(random(windowWidth), random(windowHeight));
   this.velocity = createVector(random(-10, 10), 0);
   this.acceleration = createVector(0, 0);
   this.mass = this.diameter / 5;
   this.restitution = 0.9;

   this.update = function() {
      this.velocity.add(this.acceleration);
      this.position.add(this.velocity);
      this.acceleration.mult(0);
   };

   this.display = function() {
      ellipse(this.position.x, this.position.y, this.diameter, this.diameter);
   }

   this.applyForce = function(force) {
      var f = p5.Vector.div(force, this.mass);
      this.acceleration.add(f);
   };

   this.checkEdges = function() {
      var damper = this.diameter * .75;
      if (this.position.y > (height - damper)) {
         //bottom edge checking
         this.velocity.y *= -1 *  this.restitution;
         this.position.y = (height - damper);

      }
      if (this.position.x > (width - damper)) {
         //right edge checking
         this.velocity.x *= -1 *  this.restitution;
         this.position.x = (width - damper);
      }
      if (this.position.x < 0) {
         //left edge checking
         this.velocity.x *= -1 * this.restitution;
         this.position.x = (0 + damper);
      }
      if (this.position.y < (0 + damper)) {
         //top edge checking
         this.velocity.y = -1 * this.restitution;
         this.position.y = (0 + damper);
      }
   }
};
/*
* Draws 
*/
function thing1() {
   if (dmouse != 0) {
      ellipse(mouseX, mouseY, dmouse, dmouse);
   }
}

/*
*  Draws a circle out of circles.
*/
function thing2() {
   var rad, 
      bradius = 250,
      sradius = 25;
   push();
   translate(windowWidth / 2, windowHeight / 2);
   for (var i = 0; i < 360; i++) {
      rad = radians(i);
      ellipse(sin(rad) * bradius, cos(rad) * bradius, sradius);
   }
   pop();
}

/*
*  Draws a certain number of circles , in a circle pattern.
*/
function thing3() {
   var angleStep, 
       numCircles = 24,
       theta,
       Px,
       Py,
       r = 25;
   angleStep = 360.0 / numCircles;
   push();
   for (var i = 0; i < numCircles; i++) {
      theta = i * angleStep + mouseX;
      Px = centerX + ( dmouse * cos(radians(theta)));
      Py = centerY + ( dmouse * sin(radians(theta)));
      ellipse(Px, Py, sqrt(dmouse));
   }
   pop();
}